#trying the Sudoku problem

alt_hard_board = [
        [8,0,0,0,0,0,0,0,0],
        [0,0,3,6,0,0,0,0,0],
        [0,7,0,0,9,0,2,0,0],
        [0,5,0,0,0,7,0,0,0],
        [0,0,0,0,4,5,7,0,0],
        [0,0,0,1,0,0,0,3,0],
        [0,0,1,0,0,0,0,6,8],
        [0,0,8,5,0,0,0,1,0],
        [0,9,0,0,0,0,4,0,0]]
board1 = [[0,0,0,2,6,0,7,0,1],
        [6,8,0,0,7,0,0,9,0],
        [1,9,0,0,0,4,5,0,0],
        [8,2,0,1,0,0,0,4,0],
        [0,0,4,6,0,2,9,0,0],
        [0,5,0,0,0,3,0,2,8],
        [0,0,9,3,0,0,0,7,4],
        [0,4,0,0,5,0,0,3,6],
        [7,0,3,0,1,8,0,0,0]]



class sudoku_game:

    def __init__(self):
        self.board = [
                [8,0,0,0,0,0,0,0,0],
                [0,0,3,6,0,0,0,0,0],
                [0,7,0,0,9,0,2,0,0],
                [0,5,0,0,0,7,0,0,0],
                [0,0,0,0,4,5,7,0,0],
                [0,0,0,1,0,0,0,3,0],
                [0,0,1,0,0,0,0,6,8],
                [0,0,8,5,0,0,0,1,0],
                [0,9,0,0,0,0,4,0,0]]

    def spot_works(self, q_loc, num):
        dim = len(self.board)
        verts = q_loc[0]
        horiz = q_loc[1]
        #check horizontal
        for i in range(dim):
            if i == verts:
                pass
            elif self.board[i][horiz] == num:
                return False

            #check out dem verts
            if i == horiz:
                pass
            elif self.board[verts][i] == num:
                return False

            #check diagonals
            #on top
            if verts%3 == 0:
                #on left side
                if horiz%3 == 0:
                    if self.board[verts+1][horiz+1] == num:
                        return False
                    elif self.board[verts+2][horiz+2] == num:
                        return False
                    elif self.board[verts+2][horiz+1] == num:
                        return False
                    elif self.board[verts+1][horiz+2] == num:
                        return False
                #middle
                elif horiz%3 == 1:
                    if self.board[verts+1][horiz-1] == num or self.board[verts+1][horiz+1] == num:
                        return False
                    elif self.board[verts+2][horiz-1] == num or self.board[verts+2][horiz+1] == num:
                        return False
                elif verts%3 == 2:
                    if self.board[verts+1][horiz-2] == num or self.board[verts+2][horiz-2] == num:
                        return False
                    elif self.board[verts+2][horiz-1] == num or self.board[verts+1][horiz-1] == num:
                        return False
            #in middle
            elif verts%3 == 1:

                if horiz%3 == 0:
                    if self.board[verts+1][horiz+1] == num or self.board[verts-1][horiz+2] == num:
                        return False
                    elif self.board[verts-1][horiz+1] == num or self.board[verts+1][horiz+2] == num:
                        return False
                #middle
                elif horiz%3 == 1:
                    if self.board[verts+1][horiz-1] == num or self.board[verts+1][horiz+1] == num:
                        return False
                    elif self.board[verts-1][horiz-1] == num or self.board[verts-1][horiz+1] == num:
                        return False
                elif verts%3 == 2:
                    if self.board[verts-1][horiz-1] == num or self.board[verts-1][horiz-2] == num:
                        return False
                    elif self.board[verts+1][horiz-2] == num or self.board[verts+1][horiz-1] == num:
                        return False
            #on bottom
            elif verts%3 == 2:

                if horiz%3 == 0:
                    if self.board[verts-1][horiz+1] == num:
                        return False
                    elif self.board[verts-2][horiz+2] == num:
                        return False
                    elif self.board[verts-2][horiz+1] == num:
                        return False
                    elif self.board[verts-1][horiz+2] == num:
                        return False
                #middle
                elif horiz%3 == 1:
                    if self.board[verts-1][horiz-1] == num or self.board[verts-1][horiz+1] == num:
                        return False
                    elif self.board[verts-2][horiz-1] == num or self.board[verts-2][horiz+1] == num:
                        return False
                elif verts%3 == 2:
                    if self.board[verts-1][horiz-2] == num or self.board[verts-2][horiz-2] == num:
                        return False
                    elif self.board[verts-2][horiz-1] == num or self.board[verts-1][horiz-1] == num:
                        return False

        #valid placement
        return True


    #board is an array of array NxN
    #N is the number of queens
    def sudoku_solver(self, loc_height = 0,loc_across = 0):
        if loc_height >= 8 and loc_across > 8:
            return True
        j = loc_across
        i = loc_height
        if j == 9:
            j = 0
            i += 1

        if self.board[i][j] != 0:
            return self.sudoku_solver(i,j+1)


        else:
            #the number of possible locations
            for k in range(1,10):
                #start at 0,0 go to 0,1... 0,M
                #then 1,0.... 1,M
                #M,0.... M,M
                position = [i,j]
                if self.spot_works(position, k):
                    self.board[i][j] = k
                    if self.sudoku_solver(i,j+1):
                        if i == 0 and j == 0:
                            for line in self.board:
                                print(line)
                        return True
                    self.board[i][j] = 0

        #no valid answers

        return False




sudoku = sudoku_game()
sudoku.sudoku_solver()
for line in sudoku.board:
    print(line)
